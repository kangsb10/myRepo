package kr.or.ddit.service.nongupin;

import java.util.List;
import java.util.Map;

import kr.or.ddit.dao.nongupin.INongupinDao;
import kr.or.ddit.dao.nongupinfileitem.INongupinFileItemDao;
import kr.or.ddit.utiles.AttachFileMapper;
import kr.or.ddit.vo.NongupinFileItemVO;
import kr.or.ddit.vo.NongupinVO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

@Service
public class INongupinServiceImpl implements INongupinService{

	@Autowired
	private INongupinDao dao;
	
	@Autowired
	private AttachFileMapper fileMapper;
	
	// 글 리스트 출력
	@Transactional(propagation=Propagation.REQUIRED, readOnly=true)
	@Override
	public List<NongupinVO> nongupinList(Map<String, String> params)
			throws Exception {
		return dao.nongupinList(params);
	}
	
	// 질문 리스트 출력
	@Transactional(propagation=Propagation.REQUIRED, readOnly=true)
	@Override
	public List<NongupinVO> nongupinAnswerList(Map<String, String> params)
			throws Exception {
		return dao.nongupinAnswerList(params);
	}
	
	// 글 정보 확인
	@Transactional(propagation=Propagation.REQUIRED, readOnly=true)
	@Override
	public NongupinVO nongupinInfo(Map<String, String> params) throws Exception {
		return dao.nongupinInfo(params);
	}

	// 구분 리스트 ajax로 리스트 
	@Transactional(propagation=Propagation.REQUIRED, readOnly=true)
	@Override
	public List<NongupinVO> guNM(Map<String, String> params) throws Exception {
		return dao.guNM(params);
	}

	// 글 등록 (사진 파일)
	@Transactional(propagation=Propagation.REQUIRED, rollbackFor={Exception.class})
	@Override
	public String insertnongupin(NongupinVO nongupinInfo,
			@RequestParam("files") MultipartFile[] items) throws Exception {
		String farming_in_no = null;
		
		List<NongupinFileItemVO> nongupinFileItemList = fileMapper.mappingsssss(items, farming_in_no);
		farming_in_no = dao.insertnongupin(nongupinInfo, nongupinFileItemList);
		
		return farming_in_no;
	}
	
	@Transactional(propagation=Propagation.REQUIRED, rollbackFor={Exception.class})
	@Override
	public void insertnongupinAnswer(NongupinVO nongupinInfo) throws Exception {
		
		dao.insertnongupinAnswer(nongupinInfo);
	}
	
	@Transactional(propagation=Propagation.REQUIRED, readOnly=true)
	@Override
	public int totalCount(Map<String, String> params) throws Exception {
		int totalCount = 0;
		totalCount = dao.totalCount(params);
		return totalCount;
	}

	@Transactional(propagation=Propagation.REQUIRED,rollbackFor={Exception.class})
	@Override
	public void updateboardInfo(NongupinVO nongupinInfo) throws Exception {
		dao.updateboardInfo(nongupinInfo);
	}
	
	@Transactional(propagation=Propagation.REQUIRED,rollbackFor={Exception.class})
	@Override
	public void deleteboardInfo(Map<String, String> params) throws Exception {
		dao.deleteboardInfo(params);
	}

	@Transactional(propagation=Propagation.REQUIRED, readOnly=true)
	@Override
	public List<NongupinVO> categoryList(Map<String, String> params)
			throws Exception {
		return dao.categoryList(params);
	}

	@Transactional(propagation=Propagation.REQUIRED,rollbackFor={Exception.class})
	@Override
	public void answerSelect(NongupinVO nongupinInfo) throws Exception {
		
		dao.answerSelect(nongupinInfo);
	}

	@Transactional(propagation=Propagation.REQUIRED,rollbackFor={Exception.class})
	@Override
	public void updateHit(Map<String, String> params) throws Exception {
		dao.updateHit(params);
	}

	@Transactional(propagation=Propagation.REQUIRED, readOnly=true)
	@Override
	public int dayFarmIn()
			throws Exception {
		return dao.dayFarmIn();
	}

	@Transactional(propagation=Propagation.REQUIRED, readOnly=true)
	@Override
	public int dayAnswer()
			throws Exception {
		return dao.dayAnswer();
	}
	
	
}
